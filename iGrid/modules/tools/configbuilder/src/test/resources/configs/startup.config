/* 
* Provider dependency injections
* It uses component entry names defined in the SORCER provider
* as defined by sorcer.core.provider.SorcerProvider.
*/
import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.core.provider.*;
import sorcer.util.GenericUtil;

sorcer.core.provider.ServiceProvider {

	// service provider properties
	//
 	properties = "../configs/provider.properties";
 
	// service provider generic properties
	//
	// 'name' is the name of the provider that the network sees
	//
	name = "Engineering-AirVehicle";
	description = "This is the Engineering-AirVehicle description--not terribly informative, as you can see.";
	location = "AFRL/WPAFB";
	
   	//exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance("10.131.5.217",0), new BasicILFactory());
   	
   	// control
   	//
   	//exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance("10.131.7.141",0), new BasicILFactory());
	//lookupLocators = new String[] {"jini://10.131.7.141:4160"};
	
	// java space
	//
	// this field is overridden in the constructor of the provider; space taker threads are explicitly 
	// started in last line of constructor to ensure provider is initialized before taking tasks from
	// space
	spaceEnabled = false; 
	
	
	matchInterfaceOnly = false;
	workerCount = 2;
	workerQueueSize = 0;
	maxWorkerPoolSize = 2;
	workerTransactional = true;
	
	//publishedInterfaces = new Class[] { engineering.provider.mstcgeom.MstcGeomRemoteInterface.class
	//, engineering.provider.tornado.TornadoRemoteInterface.class
	//, engineering.provider.aero2s.Aero2sRemoteInterface.class
	//, engineering.provider.astros.AstrosRemoteInterface.class
	//, engineering.provider.awave.AwaveRemoteInterface.class
	//, engineering.provider.friction.FrictionRemoteInterface.class
	//, engineering.provider.nastran.NastranRemoteInterface.class
	//, engineering.provider.self.SelfRemoteInterface.class
	//, engineering.provider.wingdes.WingDesRemoteInterface.class
	//, engineering.provider.mstcgeom.MstcGeomInputGeneratorInterface.class };
	
	publishedInterfaces = new Class[] { engineering.provider.av.AirVehicleRemoteInterface.class };
	
		
	// service beans	
	//beans = new Object[] { sorcer.rs.ex7.model.RsResponseModelBuilder.getModel() }; 
		
	//iconName="sorcer.jpg";
}

//GEN-BEGIN Do not remove
/*
 * Generated BY ConfigBuilder by reedydg on Tue Dec 17 12:37:59 EST 2013
 *
 * WARNING: Do NOT modify this code. The content of this configuration is
 * always regenerated by the Config Builder.
 */
sorcer.core.exertion.deployment {
    interfaces = new String[]{"engineering.provider.av.AirVehicleRemoteInterface"};

    codebaseJars = new String[]{"av-prv-dl.jar",
                                "sorcer-prv-dl.jar",
                                "jsk-dl.jar",
                                "provider-ui.jar",
                                "jcommon-1.0.17.jar"};

    implJars = new String[]{"eng/lib/av-prv.jar",
                            "eng/lib/eng-lib.jar",
                            "sorcer/lib/sorcer-prv.jar",
                            "sorcer/lib/sorcer-lib.jar",
                            "sorcer/lib/sorcer-modeling-lib.jar",
                            "common/jep-2.4.1a.jar",
                            "river/lib/serviceui.jar",
                            "common/jna.jar",
                            "common/jfreechart/jcommon-1.0.17.jar",
                            "common/jfreechart/jfreechart-1.0.14.jar"};

    providerClass = "engineering.provider.av.AirVehicleProviderImpl";

    jvmArgs = "-Xcheck:jni";
}
