/* 
* A SORCER Provider dependency injection definitions.
* It uses component entry names defined in the SORCER environmet
* and also defined by sorcer.core.provider.SorcerProvider.
*/
import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.arithmetic.*;
import sorcer.arithmetic.ui.*;

sorcer.core.provider.ServiceProvider {
		name="Smart Partner Arithmetic";
		publishedInterfaces = new String[] { "sorcer.arithmetic.ArithmeticRemote" };
		description = "Example of a SORCER smart proxy provider with partnership";
		location = "SORCER Lab 20B - CS TTU";
		entries = new Entry[] { ArithmeticUI.getUIDescriptor(), 
			new Comment("It uses sorcer.arithmetic.SmartArithmometer for smart proxying"), 
			new Location("3", "310", "CP TTU") };
		
        // if not declared the default exporter is BasicJeriExporter
        //exporter = new JrmpExporter(0);
        exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0), new BasicILFactory());

        // Sorcer service beans exposed by this service provider
        //beans = new String[] { ... }
        
        // smart proxy
        smartProxy = new SmartArithmometer();
        // with RMI partner object	
		server = new PartnerAveragerImpl();
		// exported with
		//serverExporter = new JrmpExporter(0);
		serverExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0), new BasicILFactory());
		iconName="sorcer.jpg";
}
	

