import java.util.logging.*;
import net.jini.ui.lookup.*;
import net.jini.core.entry.*;
import net.jini.core.discovery.*;
import net.jini.lookup.entry.*;
import org.wonderly.jini2.log.*;
import org.wonderly.util.jini.*;
import net.jini.core.constraint.*;
import net.jini.constraint.*;
import net.jini.security.*;
import java.rmi.*;
import net.jini.jeri.ssl.*;
import net.jini.jeri.*;
import net.jini.core.lookup.*;

org.wonderly.jini2.log.JiniLogManager {
	logLevel = Level.INFO;
	locators = new LookupLocator[] {
		new LookupLocator( "jini://localhost" )
	};
	entries = new Entry[] {
		new Name("Log Manager" ),
		new UIDescriptor( "Log Manager Admin", "javax.swing", null, 
			new MarshalledObject( new LoggerUIFactory() ) ),
		new FormatterEntry("Briefer",
			new StreamFormatterFactory(true)),
		new FormatterEntry("Brief",
			new StreamFormatterFactory(true,true)),
		new FormatterEntry("Stream",new StreamFormatterFactory()),
		new FormatterEntry("Simple",new SimpleFormatterFactory()),
		new FormatterEntry("XML", new XMLFormatterFactory())
	};
	profiles = new LoggingProfile[] {
		new LoggingProfile("discovery",
			new LoggingConfig[] {
				new LoggingConfig( "",
					Level.FINEST ),
				new LoggingConfig( "net.jini",
					Level.FINEST ),
				new LoggingConfig( "net.jini.loader.pref",
					Level.FINEST )
			}
		),
		new LoggingProfile("lookup",
			new LoggingConfig[] {
				new LoggingConfig( "com.sun.jini.discovery",
					Level.FINER ),
				new LoggingConfig( "com.sun.jini.reggie",
					Level.FINER ),
				new LoggingConfig( "net.jini.lookup",
					Level.FINER ),
				new LoggingConfig( "net.jini.discovery",
					Level.FINER ),
				new LoggingConfig( "net.jini.loader.pref",
					Level.FINEST )
			}
		),
		new LoggingProfile("jeri",
			new LoggingConfig[] {
				new LoggingConfig( "net.jini.jeri",
					Level.FINEST ),
				new LoggingConfig( "net.jini.loader.pref",
					Level.FINEST )
			}
		),
		new LoggingProfile("lease",
			new LoggingConfig[] {
				new LoggingConfig( "net.jini.lease",
					Level.FINER ),
				new LoggingConfig( "net.jini.loader.pref",
					Level.FINEST )
			}
		)
	};
	//activate="discovery";
}

org.wonderly.util.jini2.ServiceLookup {
	locators = new LookupLocator[] {
		new LookupLocator( "jini://localhost" )
	};

    private serviceEndpoint = SslServerEndpoint.getInstance(0);
    private serviceConstraints = 
		new BasicMethodConstraints(
		    new InvocationConstraints(
				new InvocationConstraint[]{
					Integrity.YES
				}, null
			)
		);

    private serviceILFactory =
		new BasicILFactory(serviceConstraints,
            null);

    exporter = new BasicJeriExporter(serviceEndpoint, 
    	serviceILFactory);

    private lusEndpoint = SslServerEndpoint.getInstance(0);
//    private lusEndpoint = SslServerEndpoint.getInstance(0);
    private lusConstraints = 
	new BasicMethodConstraints(
	    new InvocationConstraints(
			new InvocationConstraint[]{
//				Integrity.YES
			}, null
		)
	);

    private lusILFactory =
		new BasicILFactory( lusConstraints, null);

	// RemoteListener exporter
    lusExporter = new BasicJeriExporter(
    	lusEndpoint, lusILFactory);


    private lusPreparerConstraints = 
		new BasicMethodConstraints(
	    	new InvocationConstraints( 
			new InvocationConstraint[] {
//		    	Integrity.YES
            },
            null));

    // ServiceRegistrar preparer
    lusPreparer = 
		new BasicProxyPreparer(
	    	false,
            lusPreparerConstraints,
            /*new Permission[] { 
				new AuthenticationPermission(
		    		reggieUser,
                    clientUser,
                    "connect") 
			}*/
			null);


	lookupEnv =
		new LookupEnv( "JiniLog",
			new ServiceTemplate( null,
				new Class[] { RemoteHandler.class }, 
				null ),
			new LookupLocator[] {
				new LookupLocator("jini://localhost")
			}
		);
}

org.wonderly.jini2.log.LoggerUIFactory {
	locators = new LookupLocator[] {
		new LookupLocator( "jini://localhost" )
	};

	lookupEnv =
		new LookupEnv( "JiniLog",
			new ServiceTemplate( null,
				new Class[] { RemoteHandler.class }, 
				null ),
			new LookupLocator[] {
				new LookupLocator("jini://localhost")
			}
		);

    private serviceEndpoint = SslServerEndpoint.getInstance(0);
    private serviceConstraints = 
		new BasicMethodConstraints(
		    new InvocationConstraints(
				new InvocationConstraint[]{
					Integrity.YES
				}, null
			)
		);

    private serviceILFactory =
		new BasicILFactory(serviceConstraints,
            null);

    exporter = new BasicJeriExporter(serviceEndpoint,
    	serviceILFactory);
}