import java.security.Permission;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.*;
import net.jini.security.BasicProxyPreparer;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.AuthenticationPermission;
import javax.security.auth.login.LoginContext;

sorcer.security.ui.SecureContentPane {

	loginContext = new LoginContext("requestorLogin");
	
	/* Keystore for getting principals */
    private static providers =
        KeyStores.getKeyStore("file:security/req.truststore", null);
    private static provider = 
        KeyStores.getX500Principal("provider", providers);
	
	preparer = new BasicProxyPreparer(
		true,
		new BasicMethodConstraints(
				new InvocationConstraints(
					new InvocationConstraint[]{
						//Integrity.YES,		
						ServerAuthentication.YES
						//new ServerMinPrincipal(provider),
						//Delegation.YES
					},
					null
				)
		),
		new Permission[]{
			new AuthenticationPermission("javax.security.auth.x500.X500Principal \"CN=requestor\"","connect")
		}
	);
}

						
	
	