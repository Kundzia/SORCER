/* 
* A SORCER Provider Jini configuration for the Artimetic Provider example.
* by Mike Sobolewski, sobol@cs.ttu.edu
*/
import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import javax.security.auth.login.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.provider.arithmetic.jeri.ssl.*;

sorcer.core.provider.ServiceProvider {
		name="SSL JERI Arithmetic Example";
		interfaces = new String[] { "sorcer.arithmetic.ArithmeticRemote" };
		description = "Example of a SORCER JERI provider";
		location = "SORCER Lab 20B - CS TTU";
		entries = new Entry[] { 
			ArithmeticProviderImpl.getComponentUIDescriptor(),
			//ArithmeticProviderImpl.getFrameUIDescriptor(),
			ArithmeticProviderImpl.getCalculatorDescriptor(),
			new Comment("TTU teaching example"), 
			new Location("3", "310", "CP TTU") };
        // if not declared the default exporter is BasicJeriExporter
        //exporter = new JrmpExporter(0);
        
        //Configuring the service to use the appropiate transport which, in this case, is SSL. 
        
        exporter = new BasicJeriExporter(
        	SslServerEndpoint.getInstance(0), 
        	new BasicILFactory(
        		new BasicMethodConstraints(
        			new InvocationConstraints(
        				(InvocationConstraint[]) null,
        				(InvocationConstraint[]) null)),
        			null
        		)
        	);
        
        // Login conetxt defined in configs/ssl-jeri-arithmetic-prv.login
        loginContext = new LoginContext("sorcer.provider.arithmetic.jeri.ssl.ArithmeticProvider");
        
        iconName="sorcer.jpg";
}
	

