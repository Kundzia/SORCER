import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;
	
com.sun.jini.start {
	home = "${iGrid.home}";
	policy = "${java.security.policy}";
	ps = System.getProperty("path.separator");
	
	// webster root directories
	sorcerLibPath 	= home + "${/}lib${/}sorcer${/}lib";
 	sorcerLibDlPath = home + "${/}lib${/}sorcer${/}lib-dl";
    jiniLibPath 	= home + "${/}lib${/}river${/}lib";
    jiniLibDlPath 	= home + "${/}lib${/}river${/}lib-dl";
    rioLibPath 		= home + "${/}lib${/}rio";
    engLibPath 		= home + "${/}lib${/}eng${/}lib";
    engLibDlPath 	= home + "${/}lib${/}eng${/}lib-dl";
    deployPath 		= home + "${/}deploy";
    
	//port = Booter.getWebsterPort(); 
	port = 0;
	//address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();
    
    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up root directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)
        SorcerDescriptorUtil.getWebster(policy, port,
                                         new String[] { sorcerLibPath,
                                         			    sorcerLibDlPath,
                                         			    jiniLibDlPath,
                                                        rioLibPath,
                                                        jiniLibPath,
                                                        engLibPath,
                                                        engLibDlPath,
                                                        deployPath }),

        new SorcerServiceDescriptor(
            "sorcer-modeling-dl.jar sorcer-prv-dl.jar jsk-dl.jar",
            policy,
            sorcerLibPath + "${/}rs-model.jar",
            "sorcer.core.provider.ServiceTasker",
            new String[] { home + "${/}modules${/}examples${/}ex8${/}configs${/}rs-model-prv.config" }),

 		new SorcerServiceDescriptor(
            "sorcer-modeling-dl.jar sorcer-prv-dl.jar jsk-dl.jar",
            policy,
            sorcerLibPath + "${/}rs-model.jar",
            "sorcer.core.provider.ServiceTasker",
            new String[] { home + "${/}modules${/}examples${/}ex8${/}configs${/}rs-mf-model-prv.config" }),

		new SorcerServiceDescriptor(
            "sorcer-modeling-dl.jar sorcer-prv-dl.jar jsk-dl.jar",
            policy,
            engLibPath + "${/}conminoptimization.jar, " + sorcerLibPath +"/rs-explorer.jar",
            "sorcer.core.provider.ServiceTasker",
            new String[] { home + "${/}modules${/}examples${/}ex9${/}configs${/}crs-opti-prv.config" }),

        new SorcerServiceDescriptor(
            "sorcer-modeling-dl.jar rs-explorer-dl.jar sorcer-prv-dl.jar jsk-dl.jar",
            policy,
            sorcerLibPath + "${/}rs-explorer.jar, " + engLibPath + "${/}conminoptimization.jar",
            "sorcer.core.provider.ServiceTasker",
            new String[] { home + "${/}modules${/}examples${/}ex10a${/}configs${/}rs-explorer-prv.config" })
 
    };
}
